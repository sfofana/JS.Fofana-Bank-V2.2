package com.app;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import java.util.Optional;

import org.junit.Before;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.platform.commons.util.ClassFilter;
import org.junit.runner.RunWith;
import org.skyscreamer.jsonassert.JSONAssert;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.TestContext;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

import com.app.controller.UserController;
import com.app.data.AccountData;
import com.app.data.UserData;
import com.app.exception.ErrorMessage;
import com.app.model.Account;
import com.app.model.User;
import com.app.service.UserService;

@SpringBootTest
@RunWith(SpringRunner.class)
@AutoConfigureMockMvc
class ApplicationTests {

	@Autowired
	private MockMvc mockMvc;	
	@Autowired
	private UserController userController;
	@Autowired
	private UserService userService;
	@Autowired
	private UserData userData;
	@Autowired
	private AccountData accountData;
	
	String basicAuth = "sfofana:UofH201c1";
	byte[] basic = basicAuth.getBytes();
	
	User user = new User(1, "User", null,"Test","test@gmail.com","password",null);
	Account account = new Account(1, "checking", 1010.10, null);
	ErrorMessage errorMessage = new ErrorMessage("testMessage", "testDetails");
	
	// Controller Tests
	@Test
	public void connectionTest() throws Exception {		
		mockMvc.perform(MockMvcRequestBuilders.get("/connection")
		.header("Authorization", "Basic " + Base64.getEncoder().encodeToString(basic)))		
		.andExpect(MockMvcResultMatchers.status().isOk());
	}
	
	// Exception Tests
	
	 @Test
		public void errorMessageTest() {			
			assertEquals("testMessage", errorMessage.getMessage());
		}
	 
	 @Test
		public void errorMessageDetailsTest() {			
			assertEquals("testDetails", errorMessage.getDetails());
		}
	
	// Model Tests
	 
	 @Test
		public void userIdTest() {			
			assertEquals(1, user.getId());
		}
	 
	 @Test
		public void userFirstnameTest() {			
			assertEquals("User", null, user.getFirstname());
		}
	 
	 @Test
		public void userLastnameTest() {			
			assertEquals("Test", user.getLastname());
		}
	 
	 @Test
		public void userEmailTest() {			
			assertEquals("test@gmail.com", user.getEmail());
		}
	 
	 @Test
		public void userPasswordTest() {			
			assertEquals("password", user.getPassword());
		}
	 
	 @Test
		public void userAccountsTest() {			
			assertEquals(null, user.getAccounts());
		}
	 
	 @Test
		public void accountIdTest() {			
			assertEquals(1, account.getId());
		}
	 
	 @Test
		public void accountNameTest() {			
			assertEquals("checking", account.getName());
		}
	 
	 @Test
		public void accountAmountTest() {			
			//assertEquals("1010.10", account.getAmount());
		}
	
	 @Test
		public void accountUserTest() {			
			assertEquals(null, account.getUser());
		}
	 
	// Repository Tests
	 
	 @Test
		public void userRepoTest() {
			User user = new User(1, "User", null,"Test","test@gmail.com","password",null);	
		
			userData.save(user);
			Optional<User> users = userData.findById(user.getId());
			//assertTrue(users.isEmpty());
		}
	 
	 @Test
		public void userRepoByEmailTest() {
			User user = new User(1, "User", null,"Test","test@gmail.com","password",null);	
		
			userData.save(user);
			//assertNotNull(userData.findByEmail(user.getEmail()));
		}
	 
	 @Test
		public void accountRepoTest() {
			Account account = new Account(1, "test", 1010, null);	
		
			accountData.save(account);
			assertNotNull(accountData.findById(account.getId()));
		}
	
	// Service Tests
	
//	@Test
//	public void getUserTest() {
//		User user = new User(1, "User", null,"Test","test@gmail.com","password",null);	
//	
//		when(mockUserData.findById(user.getId()).get()).thenReturn(user);
//		//when(userService.getUser(user)).thenReturn(user);
//		assertEquals(user, userService.getUser(user));
//	}
	
	
	
//	@Test
//	public void updateUserTest() {
//		User user = new User(1, "User", null,"Test","test@gmail.com","password",null);
//		//Account account = 
//	
//		when(mockUserData.save(user)).thenReturn(user);
//		assertEquals(user, userService.updateUser(user));
//	}
	
	

}
