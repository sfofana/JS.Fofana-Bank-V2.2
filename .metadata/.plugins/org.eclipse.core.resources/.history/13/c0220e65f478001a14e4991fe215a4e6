package com.app;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.skyscreamer.jsonassert.JSONAssert;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.RequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import com.app.controller.UserController;
import com.app.data.AccountData;
import com.app.data.UserData;
import com.app.model.User;
import com.app.service.UserService;

@SpringBootTest
@RunWith(SpringRunner.class)
@WebMvcTest(value = UserController.class)
class ApplicationTests {

	@Autowired
	MockMvc mockMvc;
	
	@Autowired
	UserService userService;
	
	@MockBean
	UserData userData;
	@MockBean
	AccountData accountdata;
	@MockBean
	UserService userServiceb;
	
	// Component Tests
	
	// Controller Tests
	
	@Test
	public void connectionTest() throws Exception {
		String test = "test";
		
		RequestBuilder requestBuilder = MockMvcRequestBuilders
                .get("/connection").accept(MediaType.APPLICATION_JSON);
		Mockito.when(userServiceb.connected()).thenReturn(test);
		MvcResult result = mockMvc.perform(requestBuilder).andReturn();
		JSONAssert.assertEquals(test, result.getResponse().getContentAsString(), false);
	
	}
	
//	@Test
//	public void authenticationControllerTest() {
//		User user = new User(1, "User","Test","test@gmail.com","password",null);
//		
//		RequestBuilder requestBuilder = MockMvcRequestBuilders
//                .get("/user/Emp1/project/Project1");
//		MvcResult result;
//		try {
//			result = mockMvc.perform(requestBuilder).andReturn();
//		} catch (Exception e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//         
//        when(userService.authentication(user)).thenReturn(user);
//		assertEquals(user.toString(), result.getResponse().toString());
//	}
	
	// Exception Tests
	
	// Model Tests
	
	// Repository Tests
	
	// Service Tests
	
	@Test
	public void getUserTest() {
		User user = new User(1, "User","Test","test@gmail.com","password",null);	
	
		when(userData.findById(user.getId()).get()).thenReturn(user);
		//when(userService.getUser(user)).thenReturn(user);
		assertEquals(user, userService.getUser(user));
	}
	
	@Test
	public void authenticationTest() {
		User user = new User(1, "User","Test","test@gmail.com","password",null);	
	
		when(userData.findByEmail(user.getEmail())).thenReturn(user);
		assertEquals(user, userService.authentication(user));
	}
	
	@Test
	public void addUserTest() {
		User user = new User(1, "User","Test","test@gmail.com","password",null);	
	
		when(userData.save(user)).thenReturn(user);
		assertEquals(user, userService.addUser(user));
	}
	
	@Test
	public void updateUserTest() {
		User user = new User(1, "User","Test","test@gmail.com","password",null);
		//Account account = 
	
		when(userData.save(user)).thenReturn(user);
		assertEquals(user, userService.updateUser(user));
	}
	
	@Test
	public void getUsersTest() {
		List<User> users = new ArrayList<>();
		User u1 = new User(1, "User","Test","test@gmail.com","password",null);	
		User u2 = new User(2, "User2","Test2","test@gmail.com","password",null);
		users.add(u1);
		users.add(u2);
		when(userData.findAll()).thenReturn(users);
		assertEquals(users, userService.getUsers());
	}

}
